@page "/rapportera/{ProviderId}/bestallningar"
@inject IHealthcareProviderClient ProviderClient;
<h3>Beställningar</h3>

@if (currentProvider == null)
{

}
else
{
    <h1>@currentProvider.Name</h1>
}

<div class="container">
    <div>
    </div>
</div>

<EditForm class="form" Model="@orderForm" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="row">
        <div class="col-6">
            <div class="mb-3">
                <label for="orderDateInput" class="form-label">Beställningsdatum</label>
                <InputDate class="form-control" id="orderDateInput" @bind-Value="orderForm.OrderDate" />
            </div>
        </div>
        <div class="mb-6">
            <label for="requestedDateInput" class="form-label">Önskat lev datum</label>
            <InputDate class="form-control" id="requestedDateInput" @bind-Value="orderForm.RequestedDeliveryDate" />
        </div>
    </div>
    <div class="row">
        <div class="col-6">
            <div class="mb-3">
                <label for="quantityInput" class="form-label">Kvantitet (doser)</label>
                <InputNumber class="form-control" id="quantityInput" @bind-Value="orderForm.Quantity" />
            </div>
        </div>
        <div class="col-6">
            <div class="mb-3">
                <label for="glnInput" class="form-label">GLN-mottagre</label>
                <InputText class="form-control" id="quantityInput" @bind-Value="orderForm.GLNReceiver" />
            </div>
        </div>
    </div>

    <button class="button" type="submit">Skicka</button>
</EditForm>

@code {
    [Parameter]
    public string? ProviderId { get; set; }

    private HealthcareProviderDto currentProvider { get; set; }

    [CascadingParameter] public AppState AppState { get; set; } = null!;

    protected override async Task OnInitializedAsync()
    {
        if (Guid.TryParse(ProviderId, out var result))
        {
            currentProvider = await ProviderClient.GetHealthcareProviderAsync(result);
        }
    }

    private OrderReportFormModel orderForm = new();

    private async Task HandleValidSubmit()
    {

        // Process the valid form
    }


    public class OrderReportFormModel
    {
        public DateTime? OrderDate { get; set; }

        [Required]
        public DateTime RequestedDeliveryDate { get; set; }

        [Required]
        [Range(0, int.MaxValue)]
        public int Quantity { get; set; }

        public string GLNReceiver { get; set; }
    }
}
