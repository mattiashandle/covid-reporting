/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.14.4.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

export class HealthcareProviderClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    getHealthcareProviders(pageNumber: number | undefined, pageSize: number | undefined): Promise<PagedResponseOfHealthcareProviderDtoOf> {
        let url_ = this.baseUrl + "/HealthcareProvider?";
        if (pageNumber === null)
            throw new Error("The parameter 'pageNumber' cannot be null.");
        else if (pageNumber !== undefined)
            url_ += "pageNumber=" + encodeURIComponent("" + pageNumber) + "&";
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "pageSize=" + encodeURIComponent("" + pageSize) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetHealthcareProviders(_response);
        });
    }

    protected processGetHealthcareProviders(response: Response): Promise<PagedResponseOfHealthcareProviderDtoOf> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PagedResponseOfHealthcareProviderDtoOf.fromJS(resultData200);
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            return throwException("A server side error occurred.", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<PagedResponseOfHealthcareProviderDtoOf>(<any>null);
    }

    getHealthcareProvider(healthcareProviderId: string): Promise<HealthcareProviderDto> {
        let url_ = this.baseUrl + "/{healthcareProviderId}";
        if (healthcareProviderId === undefined || healthcareProviderId === null)
            throw new Error("The parameter 'healthcareProviderId' must be defined.");
        url_ = url_.replace("{healthcareProviderId}", encodeURIComponent("" + healthcareProviderId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetHealthcareProvider(_response);
        });
    }

    protected processGetHealthcareProvider(response: Response): Promise<HealthcareProviderDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = HealthcareProviderDto.fromJS(resultData200);
            return result200;
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            return throwException("A server side error occurred.", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<HealthcareProviderDto>(<any>null);
    }

    getOrderReports(healthcareProviderId: string, pageNumber: number | undefined, pageSize: number | undefined): Promise<PagedResponseOfOrderReportDtoOf> {
        let url_ = this.baseUrl + "/{healthcareProviderId}/orderReports?";
        if (healthcareProviderId === undefined || healthcareProviderId === null)
            throw new Error("The parameter 'healthcareProviderId' must be defined.");
        url_ = url_.replace("{healthcareProviderId}", encodeURIComponent("" + healthcareProviderId));
        if (pageNumber === null)
            throw new Error("The parameter 'pageNumber' cannot be null.");
        else if (pageNumber !== undefined)
            url_ += "pageNumber=" + encodeURIComponent("" + pageNumber) + "&";
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "pageSize=" + encodeURIComponent("" + pageSize) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetOrderReports(_response);
        });
    }

    protected processGetOrderReports(response: Response): Promise<PagedResponseOfOrderReportDtoOf> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PagedResponseOfOrderReportDtoOf.fromJS(resultData200);
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            return throwException("A server side error occurred.", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<PagedResponseOfOrderReportDtoOf>(<any>null);
    }

    addOrderReport(healthcareProviderId: string, command: CreateOrderReportCommand): Promise<OrderReportDto> {
        let url_ = this.baseUrl + "/{healthcareProviderId}/orderReports";
        if (healthcareProviderId === undefined || healthcareProviderId === null)
            throw new Error("The parameter 'healthcareProviderId' must be defined.");
        url_ = url_.replace("{healthcareProviderId}", encodeURIComponent("" + healthcareProviderId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processAddOrderReport(_response);
        });
    }

    protected processAddOrderReport(response: Response): Promise<OrderReportDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 201) {
            return response.text().then((_responseText) => {
            let result201: any = null;
            let resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result201 = OrderReportDto.fromJS(resultData201);
            return result201;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            return throwException("A server side error occurred.", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<OrderReportDto>(<any>null);
    }

    getOrderReport(healthcareProviderId: string, id: string): Promise<OrderReportDto> {
        let url_ = this.baseUrl + "/{healthcareProviderId}/orderReports/{id}";
        if (healthcareProviderId === undefined || healthcareProviderId === null)
            throw new Error("The parameter 'healthcareProviderId' must be defined.");
        url_ = url_.replace("{healthcareProviderId}", encodeURIComponent("" + healthcareProviderId));
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetOrderReport(_response);
        });
    }

    protected processGetOrderReport(response: Response): Promise<OrderReportDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = OrderReportDto.fromJS(resultData200);
            return result200;
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            return throwException("A server side error occurred.", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<OrderReportDto>(<any>null);
    }

    getStockBalanceReports(healthcareProviderId: string, pageNumber: number | undefined, pageSize: number | undefined): Promise<PagedResponseOfStockBalanceReportDtoOf> {
        let url_ = this.baseUrl + "/{healthcareProviderId}/stockBalanceReports?";
        if (healthcareProviderId === undefined || healthcareProviderId === null)
            throw new Error("The parameter 'healthcareProviderId' must be defined.");
        url_ = url_.replace("{healthcareProviderId}", encodeURIComponent("" + healthcareProviderId));
        if (pageNumber === null)
            throw new Error("The parameter 'pageNumber' cannot be null.");
        else if (pageNumber !== undefined)
            url_ += "pageNumber=" + encodeURIComponent("" + pageNumber) + "&";
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "pageSize=" + encodeURIComponent("" + pageSize) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetStockBalanceReports(_response);
        });
    }

    protected processGetStockBalanceReports(response: Response): Promise<PagedResponseOfStockBalanceReportDtoOf> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PagedResponseOfStockBalanceReportDtoOf.fromJS(resultData200);
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            return throwException("A server side error occurred.", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<PagedResponseOfStockBalanceReportDtoOf>(<any>null);
    }

    addStockBalanceReport(healthcareProviderId: string, command: CreateStockBalanceReportCommand): Promise<StockBalanceReportDto> {
        let url_ = this.baseUrl + "/{healthcareProviderId}/stockBalanceReports";
        if (healthcareProviderId === undefined || healthcareProviderId === null)
            throw new Error("The parameter 'healthcareProviderId' must be defined.");
        url_ = url_.replace("{healthcareProviderId}", encodeURIComponent("" + healthcareProviderId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processAddStockBalanceReport(_response);
        });
    }

    protected processAddStockBalanceReport(response: Response): Promise<StockBalanceReportDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 201) {
            return response.text().then((_responseText) => {
            let result201: any = null;
            let resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result201 = StockBalanceReportDto.fromJS(resultData201);
            return result201;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            return throwException("A server side error occurred.", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<StockBalanceReportDto>(<any>null);
    }

    getStockBalanceReport(healthcareProviderId: string, id: string): Promise<StockBalanceReportDto> {
        let url_ = this.baseUrl + "/{healthcareProviderId}/stockBalanceReports/{id}";
        if (healthcareProviderId === undefined || healthcareProviderId === null)
            throw new Error("The parameter 'healthcareProviderId' must be defined.");
        url_ = url_.replace("{healthcareProviderId}", encodeURIComponent("" + healthcareProviderId));
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetStockBalanceReport(_response);
        });
    }

    protected processGetStockBalanceReport(response: Response): Promise<StockBalanceReportDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = StockBalanceReportDto.fromJS(resultData200);
            return result200;
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            return throwException("A server side error occurred.", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<StockBalanceReportDto>(<any>null);
    }

    getReceiptReports(healthcareProviderId: string, pageNumber: number | undefined, pageSize: number | undefined): Promise<PagedResponseOfReceiptReportDtoOf> {
        let url_ = this.baseUrl + "/{healthcareProviderId}/receiptReports?";
        if (healthcareProviderId === undefined || healthcareProviderId === null)
            throw new Error("The parameter 'healthcareProviderId' must be defined.");
        url_ = url_.replace("{healthcareProviderId}", encodeURIComponent("" + healthcareProviderId));
        if (pageNumber === null)
            throw new Error("The parameter 'pageNumber' cannot be null.");
        else if (pageNumber !== undefined)
            url_ += "pageNumber=" + encodeURIComponent("" + pageNumber) + "&";
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "pageSize=" + encodeURIComponent("" + pageSize) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetReceiptReports(_response);
        });
    }

    protected processGetReceiptReports(response: Response): Promise<PagedResponseOfReceiptReportDtoOf> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PagedResponseOfReceiptReportDtoOf.fromJS(resultData200);
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            return throwException("A server side error occurred.", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<PagedResponseOfReceiptReportDtoOf>(<any>null);
    }

    addReceiptReport(healthcareProviderId: string, command: CreateReceiptReportCommand): Promise<ReceiptReportDto> {
        let url_ = this.baseUrl + "/{healthcareProviderId}/receiptReports";
        if (healthcareProviderId === undefined || healthcareProviderId === null)
            throw new Error("The parameter 'healthcareProviderId' must be defined.");
        url_ = url_.replace("{healthcareProviderId}", encodeURIComponent("" + healthcareProviderId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processAddReceiptReport(_response);
        });
    }

    protected processAddReceiptReport(response: Response): Promise<ReceiptReportDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 201) {
            return response.text().then((_responseText) => {
            let result201: any = null;
            let resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result201 = ReceiptReportDto.fromJS(resultData201);
            return result201;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            return throwException("A server side error occurred.", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReceiptReportDto>(<any>null);
    }

    getReceiptReport(healthcareProviderId: string, id: string): Promise<ReceiptReportDto> {
        let url_ = this.baseUrl + "/{healthcareProviderId}/receiptReports/{id}";
        if (healthcareProviderId === undefined || healthcareProviderId === null)
            throw new Error("The parameter 'healthcareProviderId' must be defined.");
        url_ = url_.replace("{healthcareProviderId}", encodeURIComponent("" + healthcareProviderId));
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetReceiptReport(_response);
        });
    }

    protected processGetReceiptReport(response: Response): Promise<ReceiptReportDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReceiptReportDto.fromJS(resultData200);
            return result200;
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            return throwException("A server side error occurred.", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReceiptReportDto>(<any>null);
    }

    getExpenditureReports(healthcareProviderId: string, pageNumber: number | undefined, pageSize: number | undefined): Promise<PagedResponseOfExpenditureReportDtoOf> {
        let url_ = this.baseUrl + "/{healthcareProviderId}/expenditureReports?";
        if (healthcareProviderId === undefined || healthcareProviderId === null)
            throw new Error("The parameter 'healthcareProviderId' must be defined.");
        url_ = url_.replace("{healthcareProviderId}", encodeURIComponent("" + healthcareProviderId));
        if (pageNumber === null)
            throw new Error("The parameter 'pageNumber' cannot be null.");
        else if (pageNumber !== undefined)
            url_ += "pageNumber=" + encodeURIComponent("" + pageNumber) + "&";
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "pageSize=" + encodeURIComponent("" + pageSize) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetExpenditureReports(_response);
        });
    }

    protected processGetExpenditureReports(response: Response): Promise<PagedResponseOfExpenditureReportDtoOf> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PagedResponseOfExpenditureReportDtoOf.fromJS(resultData200);
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            return throwException("A server side error occurred.", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<PagedResponseOfExpenditureReportDtoOf>(<any>null);
    }

    addExpenditureReport(healthcareProviderId: string, command: CreateExpenditureReportCommand): Promise<PagedResponseOfCapacityReportDtoOf> {
        let url_ = this.baseUrl + "/{healthcareProviderId}/expenditureReports";
        if (healthcareProviderId === undefined || healthcareProviderId === null)
            throw new Error("The parameter 'healthcareProviderId' must be defined.");
        url_ = url_.replace("{healthcareProviderId}", encodeURIComponent("" + healthcareProviderId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processAddExpenditureReport(_response);
        });
    }

    protected processAddExpenditureReport(response: Response): Promise<PagedResponseOfCapacityReportDtoOf> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 201) {
            return response.text().then((_responseText) => {
            let result201: any = null;
            let resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result201 = PagedResponseOfCapacityReportDtoOf.fromJS(resultData201);
            return result201;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            return throwException("A server side error occurred.", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<PagedResponseOfCapacityReportDtoOf>(<any>null);
    }

    getCapacityReport(healthcareProviderId: string, id: string): Promise<ExpenditureReportDto> {
        let url_ = this.baseUrl + "/{healthcareProviderId}/expenditureReports/{id}";
        if (healthcareProviderId === undefined || healthcareProviderId === null)
            throw new Error("The parameter 'healthcareProviderId' must be defined.");
        url_ = url_.replace("{healthcareProviderId}", encodeURIComponent("" + healthcareProviderId));
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetCapacityReport(_response);
        });
    }

    protected processGetCapacityReport(response: Response): Promise<ExpenditureReportDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ExpenditureReportDto.fromJS(resultData200);
            return result200;
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            return throwException("A server side error occurred.", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ExpenditureReportDto>(<any>null);
    }

    getCapacityReports(healthcareProviderId: string, pageNumber: number | undefined, pageSize: number | undefined): Promise<PagedResponseOfCapacityReportDtoOf> {
        let url_ = this.baseUrl + "/{healthcareProviderId}/capacityReports?";
        if (healthcareProviderId === undefined || healthcareProviderId === null)
            throw new Error("The parameter 'healthcareProviderId' must be defined.");
        url_ = url_.replace("{healthcareProviderId}", encodeURIComponent("" + healthcareProviderId));
        if (pageNumber === null)
            throw new Error("The parameter 'pageNumber' cannot be null.");
        else if (pageNumber !== undefined)
            url_ += "pageNumber=" + encodeURIComponent("" + pageNumber) + "&";
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "pageSize=" + encodeURIComponent("" + pageSize) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetCapacityReports(_response);
        });
    }

    protected processGetCapacityReports(response: Response): Promise<PagedResponseOfCapacityReportDtoOf> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PagedResponseOfCapacityReportDtoOf.fromJS(resultData200);
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            return throwException("A server side error occurred.", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<PagedResponseOfCapacityReportDtoOf>(<any>null);
    }

    addCapacityReport(healthcareProviderId: string, command: CreateCapacityReportCommand): Promise<PagedResponseOfCapacityReportDtoOf> {
        let url_ = this.baseUrl + "/{healthcareProviderId}/capacityReports";
        if (healthcareProviderId === undefined || healthcareProviderId === null)
            throw new Error("The parameter 'healthcareProviderId' must be defined.");
        url_ = url_.replace("{healthcareProviderId}", encodeURIComponent("" + healthcareProviderId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processAddCapacityReport(_response);
        });
    }

    protected processAddCapacityReport(response: Response): Promise<PagedResponseOfCapacityReportDtoOf> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 201) {
            return response.text().then((_responseText) => {
            let result201: any = null;
            let resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result201 = PagedResponseOfCapacityReportDtoOf.fromJS(resultData201);
            return result201;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            return throwException("A server side error occurred.", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<PagedResponseOfCapacityReportDtoOf>(<any>null);
    }

    getCapacityReport2(healthcareProviderId: string, id: string): Promise<CapacityReportDto> {
        let url_ = this.baseUrl + "/{healthcareProviderId}/capacityReports/{id}";
        if (healthcareProviderId === undefined || healthcareProviderId === null)
            throw new Error("The parameter 'healthcareProviderId' must be defined.");
        url_ = url_.replace("{healthcareProviderId}", encodeURIComponent("" + healthcareProviderId));
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetCapacityReport2(_response);
        });
    }

    protected processGetCapacityReport2(response: Response): Promise<CapacityReportDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CapacityReportDto.fromJS(resultData200);
            return result200;
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            return throwException("A server side error occurred.", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CapacityReportDto>(<any>null);
    }
}

export class SupplierClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    getSuppliers(pageNumber: number | undefined, pageSize: number | undefined): Promise<PagedResponseOfSupplierDtoOf> {
        let url_ = this.baseUrl + "/Supplier?";
        if (pageNumber === null)
            throw new Error("The parameter 'pageNumber' cannot be null.");
        else if (pageNumber !== undefined)
            url_ += "pageNumber=" + encodeURIComponent("" + pageNumber) + "&";
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "pageSize=" + encodeURIComponent("" + pageSize) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetSuppliers(_response);
        });
    }

    protected processGetSuppliers(response: Response): Promise<PagedResponseOfSupplierDtoOf> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PagedResponseOfSupplierDtoOf.fromJS(resultData200);
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            return throwException("A server side error occurred.", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<PagedResponseOfSupplierDtoOf>(<any>null);
    }
}

export class PagedResponseOfHealthcareProviderDtoOf implements IPagedResponseOfHealthcareProviderDtoOf {
    pageNumber?: number;
    pageSize?: number;
    totalPages?: number;
    totalRecords?: number;
    data?: HealthcareProviderDto[];

    constructor(data?: IPagedResponseOfHealthcareProviderDtoOf) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.pageNumber = _data["pageNumber"];
            this.pageSize = _data["pageSize"];
            this.totalPages = _data["totalPages"];
            this.totalRecords = _data["totalRecords"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(HealthcareProviderDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResponseOfHealthcareProviderDtoOf {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResponseOfHealthcareProviderDtoOf();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["pageNumber"] = this.pageNumber;
        data["pageSize"] = this.pageSize;
        data["totalPages"] = this.totalPages;
        data["totalRecords"] = this.totalRecords;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPagedResponseOfHealthcareProviderDtoOf {
    pageNumber?: number;
    pageSize?: number;
    totalPages?: number;
    totalRecords?: number;
    data?: HealthcareProviderDto[];
}

export class HealthcareProviderDto implements IHealthcareProviderDto {
    id?: string;
    name?: string;

    constructor(data?: IHealthcareProviderDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): HealthcareProviderDto {
        data = typeof data === 'object' ? data : {};
        let result = new HealthcareProviderDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        return data; 
    }
}

export interface IHealthcareProviderDto {
    id?: string;
    name?: string;
}

export class ProblemDetails implements IProblemDetails {
    type?: string | undefined;
    title?: string | undefined;
    status?: number | undefined;
    detail?: string | undefined;
    instance?: string | undefined;

    constructor(data?: IProblemDetails) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.type = _data["type"];
            this.title = _data["title"];
            this.status = _data["status"];
            this.detail = _data["detail"];
            this.instance = _data["instance"];
        }
    }

    static fromJS(data: any): ProblemDetails {
        data = typeof data === 'object' ? data : {};
        let result = new ProblemDetails();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["type"] = this.type;
        data["title"] = this.title;
        data["status"] = this.status;
        data["detail"] = this.detail;
        data["instance"] = this.instance;
        return data; 
    }
}

export interface IProblemDetails {
    type?: string | undefined;
    title?: string | undefined;
    status?: number | undefined;
    detail?: string | undefined;
    instance?: string | undefined;
}

export class PagedResponseOfOrderReportDtoOf implements IPagedResponseOfOrderReportDtoOf {
    pageNumber?: number;
    pageSize?: number;
    totalPages?: number;
    totalRecords?: number;
    data?: OrderReportDto[];

    constructor(data?: IPagedResponseOfOrderReportDtoOf) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.pageNumber = _data["pageNumber"];
            this.pageSize = _data["pageSize"];
            this.totalPages = _data["totalPages"];
            this.totalRecords = _data["totalRecords"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(OrderReportDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResponseOfOrderReportDtoOf {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResponseOfOrderReportDtoOf();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["pageNumber"] = this.pageNumber;
        data["pageSize"] = this.pageSize;
        data["totalPages"] = this.totalPages;
        data["totalRecords"] = this.totalRecords;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPagedResponseOfOrderReportDtoOf {
    pageNumber?: number;
    pageSize?: number;
    totalPages?: number;
    totalRecords?: number;
    data?: OrderReportDto[];
}

export class OrderReportDto implements IOrderReportDto {
    id?: string;
    orderDate?: Date | undefined;
    requestedDeliveryDate?: Date | undefined;
    quantity?: number;
    glnReceiver?: string;
    insertDate?: Date;

    constructor(data?: IOrderReportDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.orderDate = _data["orderDate"] ? new Date(_data["orderDate"].toString()) : <any>undefined;
            this.requestedDeliveryDate = _data["requestedDeliveryDate"] ? new Date(_data["requestedDeliveryDate"].toString()) : <any>undefined;
            this.quantity = _data["quantity"];
            this.glnReceiver = _data["glnReceiver"];
            this.insertDate = _data["insertDate"] ? new Date(_data["insertDate"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): OrderReportDto {
        data = typeof data === 'object' ? data : {};
        let result = new OrderReportDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["orderDate"] = this.orderDate ? this.orderDate.toISOString() : <any>undefined;
        data["requestedDeliveryDate"] = this.requestedDeliveryDate ? this.requestedDeliveryDate.toISOString() : <any>undefined;
        data["quantity"] = this.quantity;
        data["glnReceiver"] = this.glnReceiver;
        data["insertDate"] = this.insertDate ? this.insertDate.toISOString() : <any>undefined;
        return data; 
    }
}

export interface IOrderReportDto {
    id?: string;
    orderDate?: Date | undefined;
    requestedDeliveryDate?: Date | undefined;
    quantity?: number;
    glnReceiver?: string;
    insertDate?: Date;
}

export class CreateOrderReportCommand implements ICreateOrderReportCommand {
    orderDate?: Date | undefined;
    requestedDeliveryDate?: Date | undefined;
    quantity?: number;
    glnReceiver?: string;
    healthcareProviderId?: string;

    constructor(data?: ICreateOrderReportCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.orderDate = _data["orderDate"] ? new Date(_data["orderDate"].toString()) : <any>undefined;
            this.requestedDeliveryDate = _data["requestedDeliveryDate"] ? new Date(_data["requestedDeliveryDate"].toString()) : <any>undefined;
            this.quantity = _data["quantity"];
            this.glnReceiver = _data["glnReceiver"];
            this.healthcareProviderId = _data["healthcareProviderId"];
        }
    }

    static fromJS(data: any): CreateOrderReportCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateOrderReportCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["orderDate"] = this.orderDate ? this.orderDate.toISOString() : <any>undefined;
        data["requestedDeliveryDate"] = this.requestedDeliveryDate ? this.requestedDeliveryDate.toISOString() : <any>undefined;
        data["quantity"] = this.quantity;
        data["glnReceiver"] = this.glnReceiver;
        data["healthcareProviderId"] = this.healthcareProviderId;
        return data; 
    }
}

export interface ICreateOrderReportCommand {
    orderDate?: Date | undefined;
    requestedDeliveryDate?: Date | undefined;
    quantity?: number;
    glnReceiver?: string;
    healthcareProviderId?: string;
}

export class PagedResponseOfStockBalanceReportDtoOf implements IPagedResponseOfStockBalanceReportDtoOf {
    pageNumber?: number;
    pageSize?: number;
    totalPages?: number;
    totalRecords?: number;
    data?: StockBalanceReportDto[];

    constructor(data?: IPagedResponseOfStockBalanceReportDtoOf) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.pageNumber = _data["pageNumber"];
            this.pageSize = _data["pageSize"];
            this.totalPages = _data["totalPages"];
            this.totalRecords = _data["totalRecords"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(StockBalanceReportDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResponseOfStockBalanceReportDtoOf {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResponseOfStockBalanceReportDtoOf();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["pageNumber"] = this.pageNumber;
        data["pageSize"] = this.pageSize;
        data["totalPages"] = this.totalPages;
        data["totalRecords"] = this.totalRecords;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPagedResponseOfStockBalanceReportDtoOf {
    pageNumber?: number;
    pageSize?: number;
    totalPages?: number;
    totalRecords?: number;
    data?: StockBalanceReportDto[];
}

export class StockBalanceReportDto implements IStockBalanceReportDto {
    id?: string;
    date?: Date;
    supplierId?: string;
    numberOfVials?: number;
    numberOfDosages?: number;
    insertDate?: Date;

    constructor(data?: IStockBalanceReportDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.date = _data["date"] ? new Date(_data["date"].toString()) : <any>undefined;
            this.supplierId = _data["supplierId"];
            this.numberOfVials = _data["numberOfVials"];
            this.numberOfDosages = _data["numberOfDosages"];
            this.insertDate = _data["insertDate"] ? new Date(_data["insertDate"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): StockBalanceReportDto {
        data = typeof data === 'object' ? data : {};
        let result = new StockBalanceReportDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["supplierId"] = this.supplierId;
        data["numberOfVials"] = this.numberOfVials;
        data["numberOfDosages"] = this.numberOfDosages;
        data["insertDate"] = this.insertDate ? this.insertDate.toISOString() : <any>undefined;
        return data; 
    }
}

export interface IStockBalanceReportDto {
    id?: string;
    date?: Date;
    supplierId?: string;
    numberOfVials?: number;
    numberOfDosages?: number;
    insertDate?: Date;
}

export class CreateStockBalanceReportCommand implements ICreateStockBalanceReportCommand {
    date?: Date;
    supplierId?: string;
    numberOfVials?: number;
    numberOfDosages?: number;
    healthcareProviderId?: string;

    constructor(data?: ICreateStockBalanceReportCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.date = _data["date"] ? new Date(_data["date"].toString()) : <any>undefined;
            this.supplierId = _data["supplierId"];
            this.numberOfVials = _data["numberOfVials"];
            this.numberOfDosages = _data["numberOfDosages"];
            this.healthcareProviderId = _data["healthcareProviderId"];
        }
    }

    static fromJS(data: any): CreateStockBalanceReportCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateStockBalanceReportCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["supplierId"] = this.supplierId;
        data["numberOfVials"] = this.numberOfVials;
        data["numberOfDosages"] = this.numberOfDosages;
        data["healthcareProviderId"] = this.healthcareProviderId;
        return data; 
    }
}

export interface ICreateStockBalanceReportCommand {
    date?: Date;
    supplierId?: string;
    numberOfVials?: number;
    numberOfDosages?: number;
    healthcareProviderId?: string;
}

export class PagedResponseOfReceiptReportDtoOf implements IPagedResponseOfReceiptReportDtoOf {
    pageNumber?: number;
    pageSize?: number;
    totalPages?: number;
    totalRecords?: number;
    data?: ReceiptReportDto[];

    constructor(data?: IPagedResponseOfReceiptReportDtoOf) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.pageNumber = _data["pageNumber"];
            this.pageSize = _data["pageSize"];
            this.totalPages = _data["totalPages"];
            this.totalRecords = _data["totalRecords"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(ReceiptReportDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResponseOfReceiptReportDtoOf {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResponseOfReceiptReportDtoOf();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["pageNumber"] = this.pageNumber;
        data["pageSize"] = this.pageSize;
        data["totalPages"] = this.totalPages;
        data["totalRecords"] = this.totalRecords;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPagedResponseOfReceiptReportDtoOf {
    pageNumber?: number;
    pageSize?: number;
    totalPages?: number;
    totalRecords?: number;
    data?: ReceiptReportDto[];
}

export class ReceiptReportDto implements IReceiptReportDto {
    id?: string;
    deliveryDate?: Date | undefined;
    expectedDeliveryDate?: Date;
    numberOfVials?: number;
    glnReceiver?: string;
    supplierId?: string;
    insertDate?: Date;

    constructor(data?: IReceiptReportDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.deliveryDate = _data["deliveryDate"] ? new Date(_data["deliveryDate"].toString()) : <any>undefined;
            this.expectedDeliveryDate = _data["expectedDeliveryDate"] ? new Date(_data["expectedDeliveryDate"].toString()) : <any>undefined;
            this.numberOfVials = _data["numberOfVials"];
            this.glnReceiver = _data["glnReceiver"];
            this.supplierId = _data["supplierId"];
            this.insertDate = _data["insertDate"] ? new Date(_data["insertDate"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): ReceiptReportDto {
        data = typeof data === 'object' ? data : {};
        let result = new ReceiptReportDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["deliveryDate"] = this.deliveryDate ? this.deliveryDate.toISOString() : <any>undefined;
        data["expectedDeliveryDate"] = this.expectedDeliveryDate ? this.expectedDeliveryDate.toISOString() : <any>undefined;
        data["numberOfVials"] = this.numberOfVials;
        data["glnReceiver"] = this.glnReceiver;
        data["supplierId"] = this.supplierId;
        data["insertDate"] = this.insertDate ? this.insertDate.toISOString() : <any>undefined;
        return data; 
    }
}

export interface IReceiptReportDto {
    id?: string;
    deliveryDate?: Date | undefined;
    expectedDeliveryDate?: Date;
    numberOfVials?: number;
    glnReceiver?: string;
    supplierId?: string;
    insertDate?: Date;
}

export class CreateReceiptReportCommand implements ICreateReceiptReportCommand {
    deliveryDate?: Date | undefined;
    expectedDeliveryDate?: Date;
    numberOfVials?: number;
    glnReceiver?: string;
    supplierId?: string;
    healthcareProviderId?: string;

    constructor(data?: ICreateReceiptReportCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.deliveryDate = _data["deliveryDate"] ? new Date(_data["deliveryDate"].toString()) : <any>undefined;
            this.expectedDeliveryDate = _data["expectedDeliveryDate"] ? new Date(_data["expectedDeliveryDate"].toString()) : <any>undefined;
            this.numberOfVials = _data["numberOfVials"];
            this.glnReceiver = _data["glnReceiver"];
            this.supplierId = _data["supplierId"];
            this.healthcareProviderId = _data["healthcareProviderId"];
        }
    }

    static fromJS(data: any): CreateReceiptReportCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateReceiptReportCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["deliveryDate"] = this.deliveryDate ? this.deliveryDate.toISOString() : <any>undefined;
        data["expectedDeliveryDate"] = this.expectedDeliveryDate ? this.expectedDeliveryDate.toISOString() : <any>undefined;
        data["numberOfVials"] = this.numberOfVials;
        data["glnReceiver"] = this.glnReceiver;
        data["supplierId"] = this.supplierId;
        data["healthcareProviderId"] = this.healthcareProviderId;
        return data; 
    }
}

export interface ICreateReceiptReportCommand {
    deliveryDate?: Date | undefined;
    expectedDeliveryDate?: Date;
    numberOfVials?: number;
    glnReceiver?: string;
    supplierId?: string;
    healthcareProviderId?: string;
}

export class PagedResponseOfExpenditureReportDtoOf implements IPagedResponseOfExpenditureReportDtoOf {
    pageNumber?: number;
    pageSize?: number;
    totalPages?: number;
    totalRecords?: number;
    data?: ExpenditureReportDto[];

    constructor(data?: IPagedResponseOfExpenditureReportDtoOf) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.pageNumber = _data["pageNumber"];
            this.pageSize = _data["pageSize"];
            this.totalPages = _data["totalPages"];
            this.totalRecords = _data["totalRecords"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(ExpenditureReportDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResponseOfExpenditureReportDtoOf {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResponseOfExpenditureReportDtoOf();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["pageNumber"] = this.pageNumber;
        data["pageSize"] = this.pageSize;
        data["totalPages"] = this.totalPages;
        data["totalRecords"] = this.totalRecords;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPagedResponseOfExpenditureReportDtoOf {
    pageNumber?: number;
    pageSize?: number;
    totalPages?: number;
    totalRecords?: number;
    data?: ExpenditureReportDto[];
}

export class ExpenditureReportDto implements IExpenditureReportDto {
    id?: string;
    date?: Date;
    supplierId?: string;
    numberOfVials?: number;
    insertDate?: Date;

    constructor(data?: IExpenditureReportDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.date = _data["date"] ? new Date(_data["date"].toString()) : <any>undefined;
            this.supplierId = _data["supplierId"];
            this.numberOfVials = _data["numberOfVials"];
            this.insertDate = _data["insertDate"] ? new Date(_data["insertDate"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): ExpenditureReportDto {
        data = typeof data === 'object' ? data : {};
        let result = new ExpenditureReportDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["supplierId"] = this.supplierId;
        data["numberOfVials"] = this.numberOfVials;
        data["insertDate"] = this.insertDate ? this.insertDate.toISOString() : <any>undefined;
        return data; 
    }
}

export interface IExpenditureReportDto {
    id?: string;
    date?: Date;
    supplierId?: string;
    numberOfVials?: number;
    insertDate?: Date;
}

export class PagedResponseOfCapacityReportDtoOf implements IPagedResponseOfCapacityReportDtoOf {
    pageNumber?: number;
    pageSize?: number;
    totalPages?: number;
    totalRecords?: number;
    data?: CapacityReportDto[];

    constructor(data?: IPagedResponseOfCapacityReportDtoOf) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.pageNumber = _data["pageNumber"];
            this.pageSize = _data["pageSize"];
            this.totalPages = _data["totalPages"];
            this.totalRecords = _data["totalRecords"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(CapacityReportDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResponseOfCapacityReportDtoOf {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResponseOfCapacityReportDtoOf();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["pageNumber"] = this.pageNumber;
        data["pageSize"] = this.pageSize;
        data["totalPages"] = this.totalPages;
        data["totalRecords"] = this.totalRecords;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPagedResponseOfCapacityReportDtoOf {
    pageNumber?: number;
    pageSize?: number;
    totalPages?: number;
    totalRecords?: number;
    data?: CapacityReportDto[];
}

export class CapacityReportDto implements ICapacityReportDto {
    id?: string;
    date?: Date;
    numberOfVials?: number;
    supplierId?: string;
    insertDate?: Date;

    constructor(data?: ICapacityReportDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.date = _data["date"] ? new Date(_data["date"].toString()) : <any>undefined;
            this.numberOfVials = _data["numberOfVials"];
            this.supplierId = _data["supplierId"];
            this.insertDate = _data["insertDate"] ? new Date(_data["insertDate"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): CapacityReportDto {
        data = typeof data === 'object' ? data : {};
        let result = new CapacityReportDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["numberOfVials"] = this.numberOfVials;
        data["supplierId"] = this.supplierId;
        data["insertDate"] = this.insertDate ? this.insertDate.toISOString() : <any>undefined;
        return data; 
    }
}

export interface ICapacityReportDto {
    id?: string;
    date?: Date;
    numberOfVials?: number;
    supplierId?: string;
    insertDate?: Date;
}

export class CreateExpenditureReportCommand implements ICreateExpenditureReportCommand {
    date?: Date;
    supplierId?: string;
    numberOfVials?: number;
    healthcareProviderId?: string;

    constructor(data?: ICreateExpenditureReportCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.date = _data["date"] ? new Date(_data["date"].toString()) : <any>undefined;
            this.supplierId = _data["supplierId"];
            this.numberOfVials = _data["numberOfVials"];
            this.healthcareProviderId = _data["healthcareProviderId"];
        }
    }

    static fromJS(data: any): CreateExpenditureReportCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateExpenditureReportCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["supplierId"] = this.supplierId;
        data["numberOfVials"] = this.numberOfVials;
        data["healthcareProviderId"] = this.healthcareProviderId;
        return data; 
    }
}

export interface ICreateExpenditureReportCommand {
    date?: Date;
    supplierId?: string;
    numberOfVials?: number;
    healthcareProviderId?: string;
}

export class CreateCapacityReportCommand implements ICreateCapacityReportCommand {
    healthcareProviderId?: string;
    date?: Date;
    numberOfVials?: number;
    supplierId?: string;

    constructor(data?: ICreateCapacityReportCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.healthcareProviderId = _data["healthcareProviderId"];
            this.date = _data["date"] ? new Date(_data["date"].toString()) : <any>undefined;
            this.numberOfVials = _data["numberOfVials"];
            this.supplierId = _data["supplierId"];
        }
    }

    static fromJS(data: any): CreateCapacityReportCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateCapacityReportCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["healthcareProviderId"] = this.healthcareProviderId;
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["numberOfVials"] = this.numberOfVials;
        data["supplierId"] = this.supplierId;
        return data; 
    }
}

export interface ICreateCapacityReportCommand {
    healthcareProviderId?: string;
    date?: Date;
    numberOfVials?: number;
    supplierId?: string;
}

export class PagedResponseOfSupplierDtoOf implements IPagedResponseOfSupplierDtoOf {
    pageNumber?: number;
    pageSize?: number;
    totalPages?: number;
    totalRecords?: number;
    data?: SupplierDto[];

    constructor(data?: IPagedResponseOfSupplierDtoOf) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.pageNumber = _data["pageNumber"];
            this.pageSize = _data["pageSize"];
            this.totalPages = _data["totalPages"];
            this.totalRecords = _data["totalRecords"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(SupplierDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResponseOfSupplierDtoOf {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResponseOfSupplierDtoOf();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["pageNumber"] = this.pageNumber;
        data["pageSize"] = this.pageSize;
        data["totalPages"] = this.totalPages;
        data["totalRecords"] = this.totalRecords;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPagedResponseOfSupplierDtoOf {
    pageNumber?: number;
    pageSize?: number;
    totalPages?: number;
    totalRecords?: number;
    data?: SupplierDto[];
}

export class SupplierDto implements ISupplierDto {
    id?: string;
    name?: string;

    constructor(data?: ISupplierDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): SupplierDto {
        data = typeof data === 'object' ? data : {};
        let result = new SupplierDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        return data; 
    }
}

export interface ISupplierDto {
    id?: string;
    name?: string;
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}